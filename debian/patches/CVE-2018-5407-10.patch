From 875ba8b21ecc65ad9a6bdc66971e50461660fcbb Mon Sep 17 00:00:00 2001
From: Sohaib ul Hassan <soh.19.hassan@gmail.com>
Date: Sat, 16 Jun 2018 17:07:40 +0300
Subject: [PATCH] Implement coordinate blinding for EC_POINT

This commit implements coordinate blinding, i.e., it randomizes the
representative of an elliptic curve point in its equivalence class, for
prime curves implemented through EC_GFp_simple_method,
EC_GFp_mont_method, and EC_GFp_nist_method.

This commit is derived from the patch
https://marc.info/?l=openssl-dev&m=131194808413635 by Billy Brumley.

Coordinate blinding is a generally useful side-channel countermeasure
and is (mostly) free. The function itself takes a few field
multiplicationss, but is usually only necessary at the beginning of a
scalar multiplication (as implemented in the patch). When used this way,
it makes the values that variables take (i.e., field elements in an
algorithm state) unpredictable.

For instance, this mitigates chosen EC point side-channel attacks for
settings such as ECDH and EC private key decryption, for the
aforementioned curves.

For EC_METHODs using different coordinate representations this commit
does nothing, but the corresponding coordinate blinding function can be
easily added in the future to extend these changes to such curves.

Co-authored-by: Nicola Tuveri <nic.tuv@gmail.com>
Co-authored-by: Billy Brumley <bbrumley@gmail.com>

Reviewed-by: Tim Hudson <tjh@openssl.org>
Reviewed-by: Nicola Tuveri <nic.tuv@gmail.com>
Reviewed-by: Andy Polyakov <appro@openssl.org>
(Merged from https://github.com/openssl/openssl/pull/6526)
---
 CHANGES                  |  5 ++++-
 crypto/ec/ec2_smpl.c     |  3 ++-
 crypto/ec/ec_err.c       |  4 +++-
 crypto/ec/ec_lcl.h       |  5 +++++
 crypto/ec/ec_lib.c       | 18 +++++++++++++++
 crypto/ec/ec_mult.c      | 11 ++++++++++
 crypto/ec/ecp_mont.c     |  3 ++-
 crypto/ec/ecp_nist.c     |  3 ++-
 crypto/ec/ecp_nistp224.c |  3 ++-
 crypto/ec/ecp_nistp521.c |  3 ++-
 crypto/ec/ecp_nistz256.c |  3 ++-
 crypto/ec/ecp_smpl.c     | 57 +++++++++++++++++++++++++++++++++++++++++++++++-
 include/openssl/ec.h     |  1 +
 13 files changed, 110 insertions(+), 9 deletions(-)

#diff --git a/CHANGES b/CHANGES
#index ae8ceca..28b9938 100644
#--- a/CHANGES
#+++ b/CHANGES
#@@ -9,7 +9,10 @@
# 
#  Changes between 1.1.0i and 1.1.0j [xx XXX xxxx]
# 
#-  *)
#+  *) Add coordinate blinding for EC_POINT and implement projective
#+     coordinate blinding for generic prime curves as a countermeasure to
#+     chosen point SCA attacks.
#+     [Sohaib ul Hassan, Nicola Tuveri, Billy Bob Brumley]
# 
#  Changes between 1.1.0h and 1.1.0i [14 Aug 2018]
# 
Index: openssl-1.1.0g/crypto/ec/ec2_smpl.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ec2_smpl.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ec2_smpl.c	2018-12-04 08:26:11.960110012 -0500
@@ -83,7 +83,8 @@ const EC_METHOD *EC_GF2m_simple_method(v
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        0  /* blind_coordinates */
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ec_err.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ec_err.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ec_err.c	2018-12-04 08:26:11.960110012 -0500
@@ -1,6 +1,6 @@
 /*
  * Generated by util/mkerr.pl DO NOT EDIT
- * Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved.
+ * Copyright 1995-2018 The OpenSSL Project Authors. All Rights Reserved.
  *
  * Licensed under the OpenSSL license (the "License").  You may not use
  * this file except in compliance with the License.  You can obtain a copy
@@ -97,6 +97,8 @@ static ERR_STRING_DATA EC_str_functs[] =
     {ERR_FUNC(EC_F_EC_GFP_NIST_FIELD_SQR), "ec_GFp_nist_field_sqr"},
     {ERR_FUNC(EC_F_EC_GFP_NIST_GROUP_SET_CURVE),
      "ec_GFp_nist_group_set_curve"},
+    {ERR_FUNC(EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES),
+     "ec_GFp_simple_blind_coordinates"},
     {ERR_FUNC(EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT),
      "ec_GFp_simple_group_check_discriminant"},
     {ERR_FUNC(EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE),
Index: openssl-1.1.0g/crypto/ec/ec_lcl.h
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ec_lcl.h	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ec_lcl.h	2018-12-04 08:26:11.960110012 -0500
@@ -169,6 +169,7 @@ struct ec_method_st {
     /* custom ECDH operation */
     int (*ecdh_compute_key)(unsigned char **pout, size_t *poutlen,
                             const EC_POINT *pub_key, const EC_KEY *ecdh);
+    int (*blind_coordinates)(const EC_GROUP *group, EC_POINT *p, BN_CTX *ctx);
 };
 
 /*
@@ -359,6 +360,8 @@ int ec_GFp_simple_field_mul(const EC_GRO
                             const BIGNUM *b, BN_CTX *);
 int ec_GFp_simple_field_sqr(const EC_GROUP *, BIGNUM *r, const BIGNUM *a,
                             BN_CTX *);
+int ec_GFp_simple_blind_coordinates(const EC_GROUP *group, EC_POINT *p,
+                                    BN_CTX *ctx);
 
 /* method functions in ecp_mont.c */
 int ec_GFp_mont_group_init(EC_GROUP *);
@@ -611,3 +614,5 @@ int X25519(uint8_t out_shared_key[32], c
            const uint8_t peer_public_value[32]);
 void X25519_public_from_private(uint8_t out_public_value[32],
                                 const uint8_t private_key[32]);
+
+int ec_point_blind_coordinates(const EC_GROUP *group, EC_POINT *p, BN_CTX *ctx);
Index: openssl-1.1.0g/crypto/ec/ec_lib.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ec_lib.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ec_lib.c	2018-12-04 08:26:11.960110012 -0500
@@ -1002,3 +1002,21 @@ int ec_group_simple_order_bits(const EC_
         return 0;
     return BN_num_bits(group->order);
 }
+
+/*-
+ * Coordinate blinding for EC_POINT.
+ *
+ * The underlying EC_METHOD can optionally implement this function:
+ * underlying implementations should return 0 on errors, or 1 on
+ * success.
+ *
+ * This wrapper returns 1 in case the underlying EC_METHOD does not
+ * support coordinate blinding.
+ */
+int ec_point_blind_coordinates(const EC_GROUP *group, EC_POINT *p, BN_CTX *ctx)
+{
+    if (group->meth->blind_coordinates == NULL)
+        return 1; /* ignore if not implemented */
+
+    return group->meth->blind_coordinates(group, p, ctx);
+}
Index: openssl-1.1.0g/crypto/ec/ec_mult.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ec_mult.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ec_mult.c	2018-12-04 08:26:11.960110012 -0500
@@ -216,6 +216,17 @@ static int ec_mul_consttime(const EC_GRO
         || (bn_wexpand(r->Z, group_top) == NULL))
         goto err;
 
+    /*-
+     * Apply coordinate blinding for EC_POINT.
+     *
+     * The underlying EC_METHOD can optionally implement this function:
+     * ec_point_blind_coordinates() returns 0 in case of errors or 1 on
+     * success or if coordinate blinding is not implemented for this
+     * group.
+     */
+    if (!ec_point_blind_coordinates(group, s, ctx))
+        goto err;
+
     /* top bit is a 1, in a fixed pos */
     if (!EC_POINT_copy(r, s))
         goto err;
Index: openssl-1.1.0g/crypto/ec/ecp_mont.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_mont.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_mont.c	2018-12-04 08:26:11.960110012 -0500
@@ -66,7 +66,8 @@ const EC_METHOD *EC_GFp_mont_method(void
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        ec_GFp_simple_blind_coordinates
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ecp_nist.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_nist.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_nist.c	2018-12-04 08:26:11.960110012 -0500
@@ -68,7 +68,8 @@ const EC_METHOD *EC_GFp_nist_method(void
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        ec_GFp_simple_blind_coordinates
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ecp_nistp224.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_nistp224.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_nistp224.c	2018-12-04 08:26:11.960110012 -0500
@@ -291,7 +291,8 @@ const EC_METHOD *EC_GFp_nistp224_method(
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        0  /* blind_coordinates */
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ecp_nistp521.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_nistp521.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_nistp521.c	2018-12-04 08:26:11.960110012 -0500
@@ -1643,7 +1643,8 @@ const EC_METHOD *EC_GFp_nistp521_method(
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        0  /* blind_coordinates */
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ecp_nistz256.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_nistz256.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_nistz256.c	2018-12-04 08:26:11.960110012 -0500
@@ -1552,7 +1552,8 @@ const EC_METHOD *EC_GFp_nistz256_method(
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        0                                           /* blind_coordinates */
     };
 
     return &ret;
Index: openssl-1.1.0g/crypto/ec/ecp_smpl.c
===================================================================
--- openssl-1.1.0g.orig/crypto/ec/ecp_smpl.c	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/crypto/ec/ecp_smpl.c	2018-12-04 08:26:11.960110012 -0500
@@ -67,7 +67,8 @@ const EC_METHOD *EC_GFp_simple_method(vo
         ec_key_simple_generate_public_key,
         0, /* keycopy */
         0, /* keyfinish */
-        ecdh_simple_compute_key
+        ecdh_simple_compute_key,
+        ec_GFp_simple_blind_coordinates
     };
 
     return &ret;
@@ -1367,3 +1368,57 @@ int ec_GFp_simple_field_sqr(const EC_GRO
 {
     return BN_mod_sqr(r, a, group->field, ctx);
 }
+
+/*-
+ * Apply randomization of EC point projective coordinates:
+ *
+ *   (X, Y ,Z ) = (lambda^2*X, lambda^3*Y, lambda*Z)
+ *   lambda = [1,group->field)
+ *
+ */
+int ec_GFp_simple_blind_coordinates(const EC_GROUP *group, EC_POINT *p,
+                                    BN_CTX *ctx)
+{
+    int ret = 0;
+    BIGNUM *lambda = NULL;
+    BIGNUM *temp = NULL;
+
+    BN_CTX_start(ctx);
+    lambda = BN_CTX_get(ctx);
+    temp = BN_CTX_get(ctx);
+    if (temp == NULL) {
+        ECerr(EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES, ERR_R_MALLOC_FAILURE);
+        goto err;
+    }
+
+    /* make sure lambda is not zero */
+    do {
+        if (!BN_rand_range(lambda, group->field)) {
+            ECerr(EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES, ERR_R_BN_LIB);
+            goto err;
+        }
+    } while (BN_is_zero(lambda));
+
+    /* if field_encode defined convert between representations */
+    if (group->meth->field_encode != NULL
+        && !group->meth->field_encode(group, lambda, lambda, ctx))
+        goto err;
+    if (!group->meth->field_mul(group, p->Z, p->Z, lambda, ctx))
+        goto err;
+    if (!group->meth->field_sqr(group, temp, lambda, ctx))
+        goto err;
+    if (!group->meth->field_mul(group, p->X, p->X, temp, ctx))
+        goto err;
+    if (!group->meth->field_mul(group, temp, temp, lambda, ctx))
+        goto err;
+    if (!group->meth->field_mul(group, p->Y, p->Y, temp, ctx))
+        goto err;
+    p->Z_is_one = 0;
+
+    ret = 1;
+
+ err:
+     BN_CTX_end(ctx);
+     return ret;
+}
+
Index: openssl-1.1.0g/include/openssl/ec.h
===================================================================
--- openssl-1.1.0g.orig/include/openssl/ec.h	2018-12-04 08:26:11.964110102 -0500
+++ openssl-1.1.0g/include/openssl/ec.h	2018-12-04 08:26:11.960110012 -0500
@@ -1424,6 +1424,7 @@ int ERR_load_EC_strings(void);
 # define EC_F_EC_GFP_NIST_FIELD_MUL                       200
 # define EC_F_EC_GFP_NIST_FIELD_SQR                       201
 # define EC_F_EC_GFP_NIST_GROUP_SET_CURVE                 202
+# define EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES             287
 # define EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT      165
 # define EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE               166
 # define EC_F_EC_GFP_SIMPLE_MAKE_AFFINE                   102
